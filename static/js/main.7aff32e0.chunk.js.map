{"version":3,"sources":["Components/Alert.js","Components/Content.js","Components/Hover.js","Components/Layout.js","App.js","serviceWorker.js","index.js","Components/Layout.module.css"],"names":["Alert","Alerthandler","alert","style","textAlign","onClick","this","Component","Content1","top","color","position","HoverText","styled","p","LayOut","className","Hover","styles","home","href","about","project","align","Content","App","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sOAkBeA,E,2MAdXC,aAAe,WACXC,MAAM,oC,wEAGN,OACI,yBAAKC,MAAO,CACVC,UAAW,WAET,4BAAQC,QAASC,KAAKL,cAAtB,c,GATIM,aCYLC,E,iLAVP,OACI,yBAAKL,MAAO,CAACC,UAAU,SAAUK,IAAK,OAAQC,MAAM,UAChD,kBAAC,EAAD,MACA,wBAAIP,MAAO,CAACQ,SAAS,SAAUF,IAAK,QAApC,8B,GALOF,a,4ZCAvB,IAoBeK,E,MApBGC,EAAOC,EAAV,KC6BAC,E,iLAvBP,OACF,kBAAC,IAAD,CAAQC,UAAU,UAGZ,kBAACC,EAAD,CAAWD,UAAWE,IAAOC,MAC3B,uBAAGC,KAAK,KAAKJ,UAAWE,IAAOC,KAAMhB,MAAO,CAACO,MAAM,SAAnD,QACA,uBAAGU,KAAK,KAAKJ,UAAWE,IAAOG,MAAOlB,MAAO,CAACO,MAAM,SAApD,SACA,uBAAGU,KAAK,KAAKJ,UAAWE,IAAOI,QAASnB,MAAO,CAACO,MAAM,SAAtD,aAKJ,yBAAKP,MAAO,CAACoB,MAAO,WAElB,kBAACC,EAAD,Y,GAjBSjB,a,OCaNkB,MAbf,WACE,OACI,oCACF,yBAAKC,GAAG,UACR,yBAAKA,GAAG,WACR,yBAAKA,GAAG,WACN,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBExI5BC,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,QAAU,wBAAwB,SAAW,yBAAyB,IAAM,sB","file":"static/js/main.7aff32e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nclass Alert extends Component {\n    Alerthandler = () =>{\n        alert(\"Welcome to My Portfolio Webpage\")\n    }\n    render() {\n        return (\n            <div style={{\n              textAlign: 'center'\n            }}>\n                <button onClick={this.Alerthandler}>Alert</button>\n            </div>\n        )\n    }\n}\n\nexport default Alert\n","import React, { Component } from 'react'\nimport Alert from './Alert'\n// import style from './Layout.module.css'\nclass Content1 extends Component {\n    render() {\n        return (\n            <div style={{textAlign:'center', top: '100%', color:\"white\"}}>\n                <Alert />\n                <h2 style={{position:\"center\", top: \"50%\"}}>Hi I Am Cristo Mathew</h2>\n                \n            </div>\n        )\n    }\n}\n\nexport default Content1\n","\nimport styled from 'styled-components';\n\nconst HoverText = styled.p`\nposition: fixed;\ntop: 50%;\n-webkit-transform: translateY(-50%);\n-ms-transform: translateY(-50%);\ntransform: translateY(-50%);\na {\n    display: block;\n  text-align: center;\n  padding: 16px;\n  transition: all 0.3s ease;\n  color: white;\n  font-size: 20px;\n}\n    \n\ta:hover {\n\t\t\n        background-color: #000;\n    }\n`\nexport default HoverText","import React, { Component } from 'react'\nimport { Layout } from 'antd';\nimport styles from './Layout.module.css'\nimport Content1 from './Content';\nimport HoverText from './Hover';\n\nclass LayOut extends Component {\n    \n    render() {\n        return (\n      <Layout className=\"layout\">\n          {/* <div className={styles.bar}> */}\n          \n            <HoverText className={styles.home}>\n              <a href=\"/#\" className={styles.home} style={{color:\"#fff\"}}>Home</a>\n              <a href=\"/#\" className={styles.about} style={{color:\"#fff\"}}>About</a>\n              <a href=\"/#\" className={styles.project} style={{color:\"#fff\"}}>Projects</a>\n            </HoverText>\n            {/* <HoverText href=\"#\" className={styles.about}><a href=\"/#\" style={{color:\"#fff\"}}>About</a></HoverText>\n            <HoverText href=\"#\" className={styles.project}><a href=\"/#\" style={{color:\"#fff\"}}>Projects</a></HoverText> */}\n          {/* </div> */}\n          <div style={{align: \"center\"}}>\n            \n            <Content1 />\n            \n          </div>\n      </Layout>\n\n        );\n    }\n}\n\nexport default LayOut\n\n\n","import React from 'react';\n// import 'antd/dist/antd.css';\n// import logo from './logo.svg';\nimport LayOut from './Components/Layout'\nimport './index.css'\n// import './App.css'\nfunction App() {\n  return (\n      <>\n    <div id='stars'></div>\n    <div id='stars2'></div>\n    <div id='stars3'></div>\n      <LayOut />\n      </>\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Layout_home__3IyT_\",\"about\":\"Layout_about__1EMlZ\",\"project\":\"Layout_project__1DuHY\",\"linkedin\":\"Layout_linkedin__bIaAM\",\"bar\":\"Layout_bar__1EL_B\"};"],"sourceRoot":""}