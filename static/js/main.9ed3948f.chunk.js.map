{"version":3,"sources":["logo.svg","Components/Alert.js","Components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Alert","Alerthandler","alert","style","textAlign","onClick","this","Component","Header","Layout","Sider","Content","LayOut","state","collapsed","toggle","setState","className","trigger","collapsible","theme","mode","defaultSelectedKeys","Item","key","type","background","padding","margin","minHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,kC,2LCkB5BC,G,kNAdXC,aAAe,WACXC,MAAM,iB,wEAGN,OACI,yBAAKC,MAAO,CACVC,UAAW,WAET,4BAAQC,QAASC,KAAKL,cAAtB,c,GATIM,cCCZC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QAwDRC,E,2MArDXC,MAAQ,CACJC,WAAW,G,EAGbC,OAAS,WACP,EAAKC,SAAS,CACZF,WAAY,EAAKD,MAAMC,a,wEAIzB,OACI,kBAAC,IAAD,CAAQG,UAAU,OACtB,kBAACP,EAAD,CAAOQ,QAAS,KAAMC,aAAW,EAACL,UAAWR,KAAKO,MAAMC,WACtD,yBAAKG,UAAU,SACf,kBAAC,IAAD,CAAMG,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACrD,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,SACX,wCAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,iBACX,wCAEF,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACb,kBAAC,IAAD,CAAMC,KAAK,WACX,0CAIN,kBAAC,IAAD,KACE,kBAACjB,EAAD,CAAQL,MAAO,CAAEuB,WAAY,OAAQC,QAAS,IAC5C,kBAAC,IAAD,CACEV,UAAU,UACVQ,KAAMnB,KAAKO,MAAMC,UAAY,cAAgB,YAC7CT,QAASC,KAAKS,UAGlB,kBAACJ,EAAD,CACER,MAAO,CACLyB,OAAQ,YACRD,QAAS,GACTD,WAAY,OACZG,UAAW,UAGb,kBAAC,EAAD,a,GA9CStB,aCONuB,MATf,WACE,OAEI,kBAAC,EAAD,OCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9ed3948f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\n\nclass Alert extends Component {\n    Alerthandler = () =>{\n        alert(\"Welcome User\")\n    }\n    render() {\n        return (\n            <div style={{\n              textAlign: 'center'\n            }}>\n                <button onClick={this.Alerthandler}>Alert</button>\n            </div>\n        )\n    }\n}\n\nexport default Alert\n","import React, { Component } from 'react'\nimport { Layout, Menu, Icon } from 'antd';\nimport './Layout.css'\nimport Alert from './Alert';\nconst { Header, Sider, Content } = Layout;\n\nclass LayOut extends Component {\n    state = {\n        collapsed: true,\n      };\n    \n      toggle = () => {\n        this.setState({\n          collapsed: !this.state.collapsed,\n        });\n      };\n    render() {\n        return (\n            <Layout className=\"new\">\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n          <div className=\"logo\" />\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n            <Menu.Item key=\"1\">\n              <Icon type=\"user\" />\n              <span>nav 1</span>\n            </Menu.Item>\n            <Menu.Item key=\"2\">\n              <Icon type=\"video-camera\" />\n              <span>nav 2</span>\n            </Menu.Item>\n            <Menu.Item key=\"3\">\n              <Icon type=\"upload\" />\n              <span>nav 3</span>\n            </Menu.Item>\n          </Menu>\n        </Sider>\n        <Layout>\n          <Header style={{ background: '#fff', padding: 0 }}>\n            <Icon\n              className=\"trigger\"\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n              onClick={this.toggle}\n            />\n          </Header>\n          <Content\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              background: '#fff',\n              minHeight: '100vh',\n            }}\n          >\n            <Alert />\n          </Content>\n        </Layout>\n      </Layout>\n        );\n    }\n}\n\nexport default LayOut\n\n\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport logo from './logo.svg';\nimport LayOut from './Components/Layout'\nfunction App() {\n  return (\n    \n      <LayOut />\n    \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}